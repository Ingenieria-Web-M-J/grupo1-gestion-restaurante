// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String              @id @default(cuid())
  name          String?
  email         String?             @unique
  emailVerified DateTime?
  image         String?
  role          Role?               @relation(fields: [roleId], references: [id])
  roleId        String?
  accounts      Account[]
  sessions      Session[]
  materials     Material[]
  movements     InventoryMovement[]
  payments      Payment[]
}

model Material {
  id        String              @id @default(cuid())
  name      String              @unique
  description String
  quantity  Int
  price     Int
  createdBy User                @relation(fields: [userId], references: [id])
  userId    String
  movements InventoryMovement[]
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
}

enum Enum_MovementType {
  ENTRADA
  SALIDA
}

model InventoryMovement { 
// Usado como un estilo de trazabilidad de todos los movimientos de "inventario"
// Se podría utilizar para guardar los pedidos, en el que una ENTRADA suma elementos de material y una SALIDA se realiza cuando se hace un pedido.
  id           String            @id @default(cuid())
  movementType Enum_MovementType  // Tipo de movimiento. SALIDA es para un pedido saliente, ENTRADA es para restock de material
  quantity     Int               //Cantidad de elementos involucrados en el movimiento
  material     Material          @relation(fields: [materialId], references: [id])
  materialId   String
  paymentId    String   // Foreign key field
  payment      Payment  @relation(fields: [paymentId], references: [id])
  createdBy    User              @relation(fields: [userId], references: [id])
  userId       String
  state        Enum_Movement_State?   // Campo opcional para el estado actual de el movimiento. De momento sólo aplicable a pedidos.
  // state es un campo que debe poderse actualizar.
}

enum Enum_Movement_State {
  PENDIENTE
  COCINANDO
  ENVIADO
}

enum Enum_RoleName {
  ADMIN
  USER
}

model Role {
  id        String        @id @default(cuid())
  name      Enum_RoleName @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Enum_Payment_Method {
  PSE
  TARJETA_CREDITO
  EFECTIVO
}

model Payment {
  id            String  @id @default(cuid())
  items         InventoryMovement[]
  createdBy     User  @relation(fields: [userId], references: [id])
  userId        String  
  paymentDate   DateTime  @default(now())
  paymentMethod Enum_Payment_Method
  total         Int
}
